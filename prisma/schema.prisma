generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("profiles")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  emailVerified   DateTime?
  image           String?
  company         String?
  phone           String?
  password        String
  profileId       String
  profile         Profile  @relation(fields: [profileId], references: [id])
  resetToken      String?
  resetTokenExpiry DateTime?
  loginLogs       LoginLog[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  subscriptions  Subscription[]
  stripeCustomerId String?   @map("stripe_customer_id")
  payments           Payment[]     
  @@map("users")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("login_logs")
}

model Plan {
  id                String   @id @default(cuid())
  name              String   @unique
  price             Decimal
  includedUnits     Int      @map("included_units")
  maxUsers          Int      @map("max_users")
  extraUserPrice    Decimal? @map("extra_user_price")
  maxChecklists     Int?     @map("max_checklists")
  extraUnitPrice    Decimal? @map("extra_unit_price")
  isCustom          Boolean  @default(false) @map("is_custom")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  subscriptions  Subscription[]

  @@map("plans")
} 

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model Subscription {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @map("user_id")
  plan         Plan           @relation(fields: [planId], references: [id])
  planId       String         @map("plan_id")
  startDate    DateTime       @default(now()) @map("start_date")
  endDate      DateTime?      @map("end_date")
  status       SubscriptionStatus @default(ACTIVE)
  invoices     Invoice[]
  payments     Payment[]      // relação inversa
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt      @map("updated_at")

  @@map("subscriptions")
}


enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

model Invoice {
  id              String       @id @default(cuid())
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String       @map("subscription_id")
  period          String       @map("period")
  amount          Decimal      @map("amount")
  issuedAt        DateTime     @default(now()) @map("issued_at")
  dueDate         DateTime     @map("due_date")
  paidAt          DateTime?    @map("paid_at")
  status          InvoiceStatus       @default(PENDING)
  payment         Payment?     @relation("InvoicePayment", fields: [paymentId], references: [id])
  paymentId       String?      @map("payment_id") @unique
  createdAt       DateTime     @default(now())      @map("created_at")
  updatedAt       DateTime     @updatedAt           @map("updated_at")

  @@unique([subscriptionId, period])
  @@map("invoices")
}

enum PaymentStatus {
  REQUIRES_PAYMENT_METHOD
  SUCCEEDED
  FAILED
}

model Payment {
  id                     String         @id @default(cuid())
  user                   User           @relation(fields: [userId], references: [id])
  userId                 String         @map("user_id")
  subscription           Subscription?  @relation(fields: [subscriptionId], references: [id])
  subscriptionId         String?        @map("subscription_id")
  stripePaymentIntentId  String         @map("stripe_payment_intent_id")
  amount                 Decimal        @map("amount")
  currency               String         @default("BRL")
  status                 PaymentStatus  @default(REQUIRES_PAYMENT_METHOD)
  paidAt                 DateTime?      @map("paid_at")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @updatedAt       @map("updated_at")
  invoice                Invoice?       @relation("InvoicePayment")

  @@map("payments")
}