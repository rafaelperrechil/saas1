generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("profiles")
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  name             String?
  emailVerified    DateTime?
  image            String?
  phone            String?
  country          String?
  timezone         String?
  password         String
  profileId        String
  profile          Profile      @relation(fields: [profileId], references: [id])
  resetToken       String?
  resetTokenExpiry DateTime?
  loginLogs        LoginLog[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  organization     Organization? @relation("OrgUsers", fields: [organizationId], references: [id])
  organizationId   String?      @map("organization_id")
  subscriptions    Subscription[]
  payments         Payment[]
  stripeCustomerId String?      @map("stripe_customer_id")
  status           String       @default("ACTIVE")

  departmentLinks  DepartmentResponsible[]

  @@map("users")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("login_logs")
}

model Organization {
  id             String    @id @default(cuid())
  name           String
  employeesCount Int       @map("employees_count")
  country        String
  city           String
  nicheId        String    @map("niche_id")
  niche          Niche     @relation(fields: [nicheId], references: [id])
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt      @map("updated_at")

  users          User[]    @relation("OrgUsers")
  branches       Branch[]

  @@map("organizations")
}

model Niche {
  id             String         @id @default(cuid())
  name           String         @unique

  organizations  Organization[]

  @@map("niches")
}

model Branch {
  id             String       @id @default(cuid())
  name           String
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt      @map("updated_at")
  wizardCompleted Boolean     @default(false) @map("wizard_completed")

  departments    Department[]
  environments   Environment[]

  @@map("branches")
}

model Department {
  id        String                  @id @default(cuid())
  name      String
  branchId  String                  @map("branch_id")
  branch    Branch                  @relation(fields: [branchId], references: [id])
  createdAt DateTime                @default(now()) @map("created_at")
  updatedAt DateTime                @updatedAt      @map("updated_at")

  responsibles DepartmentResponsible[]

  @@map("departments")
}

model DepartmentResponsible {
  departmentId String     @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id])
  userId       String     @map("user_id")
  user         User       @relation(fields: [userId], references: [id])
  assignedAt   DateTime   @default(now()) @map("assigned_at")

  @@id([departmentId, userId])
  @@map("department_responsibles")
}

model Environment {
  id        String   @id @default(cuid())
  name      String
  branchId  String   @map("branch_id")
  branch    Branch   @relation(fields: [branchId], references: [id])
  position  Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("environments")
}

model Plan {
  id               String         @id @default(cuid())
  name             String         @unique
  price            Decimal
  includedUnits    Int            @map("included_units")
  maxUsers         Int            @map("max_users")
  extraUserPrice   Decimal?       @map("extra_user_price")
  maxChecklists    Int?           @map("max_checklists")
  extraUnitPrice   Decimal?       @map("extra_unit_price")
  isCustom         Boolean        @default(false) @map("is_custom")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt      @map("updated_at")

  subscriptions    Subscription[]

  @@map("plans")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model Subscription {
  id            String             @id @default(cuid())
  userId        String             @map("user_id")
  user          User               @relation(fields: [userId], references: [id])
  planId        String             @map("plan_id")
  plan          Plan               @relation(fields: [planId], references: [id])
  startDate     DateTime           @default(now()) @map("start_date")
  endDate       DateTime?          @map("end_date")
  status        SubscriptionStatus @default(ACTIVE)
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt      @map("updated_at")

  invoices      Invoice[]
  payments      Payment[]

  @@map("subscriptions")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

model Invoice {
  id              String        @id @default(cuid())
  subscriptionId  String        @map("subscription_id")
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])
  period          String        @map("period")
  amount          Decimal       @map("amount")
  issuedAt        DateTime      @default(now()) @map("issued_at")
  dueDate         DateTime      @map("due_date")
  paidAt          DateTime?     @map("paid_at")
  status          InvoiceStatus @default(PENDING)
  paymentId       String?       @map("payment_id") @unique
  payment         Payment?      @relation("InvoicePayment", fields: [paymentId], references: [id])
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt      @map("updated_at")

  @@unique([subscriptionId, period])
  @@map("invoices")
}

enum PaymentStatus {
  REQUIRES_PAYMENT_METHOD
  SUCCEEDED
  FAILED
}

model Payment {
  id                    String         @id @default(cuid())
  userId                String         @map("user_id")
  user                  User           @relation(fields: [userId], references: [id])
  subscriptionId        String?        @map("subscription_id")
  subscription          Subscription?  @relation(fields: [subscriptionId], references: [id])
  stripePaymentIntentId String         @map("stripe_payment_intent_id")
  amount                Decimal        @map("amount")
  currency              String         @default("BRL")
  status                PaymentStatus  @default(REQUIRES_PAYMENT_METHOD)
  paidAt                DateTime?      @map("paid_at")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt      @map("updated_at")
  invoice               Invoice?       @relation("InvoicePayment")

  @@map("payments")
}